import{_ as e,o,c as a,Q as t}from"./chunks/framework.f0aa7f6c.js";const b=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"category/others/linux/linux中常用命令.md","filePath":"category/others/linux/linux中常用命令.md"}'),c={name:"category/others/linux/linux中常用命令.md"},d=t('<p><a href="https://www.runoob.com/linux/linux-command-manual.html" target="_blank" rel="noreferrer">详细指令：菜鸟教程</a></p><blockquote><p>其实 linux 下的指令没什么难的，刚接触的时候认为这么多指令，根本记不住，但是使用了一段时间后发现其实有时候还蛮方便的，多敲几次自然而言的也就记住了</p></blockquote><h2 id="ls-列出指定工作目录下的文件夹与文件" tabindex="-1">ls（列出指定工作目录下的文件夹与文件） <a class="header-anchor" href="#ls-列出指定工作目录下的文件夹与文件" aria-label="Permalink to &quot;ls（列出指定工作目录下的文件夹与文件）&quot;">​</a></h2><p>英文全拼：list directory contents。</p><blockquote><p><code>ls</code>后面可以跟上路径，例如 ls root/test/ 或 ls -l root/test</p></blockquote><p><code>-a</code>：列出所有文件及文件夹（以<code>.</code>开头的隐藏文件也会列出） <code>-A</code>：同 -a ，但不列出 &quot;.&quot; (目前目录) 及 &quot;..&quot; (父目录) <code>-l</code>：以长格式显示文件和目录信息，包括权限、所有者、大小、创建时间等 <code>-t</code>：将按照修改时间排序，最新的文件在最前面 <code>-F</code>：在列出的文件名称后加一符号；例如可执行档则加 &quot;*&quot;, 目录则加 &quot;/&quot; <code>-R</code>：递归显示目录中的所有文件和子目录</p><h2 id="alias-给命令创建别名" tabindex="-1">alias（给命令创建别名） <a class="header-anchor" href="#alias-给命令创建别名" aria-label="Permalink to &quot;alias（给命令创建别名）&quot;">​</a></h2><p>示例：<code>alias ls=&quot;ls --color=auto&quot;</code></p><blockquote><p>当这样设置后，我们输入<code>ls</code>时，其实执行的是<code>ls --color=auto</code>。直接输入<code>alias</code>将列出当前已经存在的别名</p></blockquote><h2 id="unalias-删除别名" tabindex="-1">unalias（删除别名） <a class="header-anchor" href="#unalias-删除别名" aria-label="Permalink to &quot;unalias（删除别名）&quot;">​</a></h2><p>示例：<code>unalias ls</code></p><h2 id="pwd-打印当前工作目录" tabindex="-1">pwd（打印当前工作目录） <a class="header-anchor" href="#pwd-打印当前工作目录" aria-label="Permalink to &quot;pwd（打印当前工作目录）&quot;">​</a></h2><p>英文全拼：print work directory</p><h2 id="cd-切换工作目录" tabindex="-1">cd（切换工作目录） <a class="header-anchor" href="#cd-切换工作目录" aria-label="Permalink to &quot;cd（切换工作目录）&quot;">​</a></h2><p>英文全拼：change directory</p><blockquote><p>直接输入<code>cd</code>会切换到当前用户目录</p></blockquote><h2 id="cp-复制文件与文件夹" tabindex="-1">cp（复制文件与文件夹） <a class="header-anchor" href="#cp-复制文件与文件夹" aria-label="Permalink to &quot;cp（复制文件与文件夹）&quot;">​</a></h2><p>英文全拼：copy file 示例：<code>cp 源文件 复制文件</code>,表示将 a.txt 复制一份，名称为 b.txt。如果需要复制目录则需要使用在<code>cp</code>后加上<code>-r</code>，表示递归复制，例如，<code>cp 源目录/ 复制目录/</code></p><h2 id="rm-删除文件与文件夹" tabindex="-1">rm（删除文件与文件夹） <a class="header-anchor" href="#rm-删除文件与文件夹" aria-label="Permalink to &quot;rm（删除文件与文件夹）&quot;">​</a></h2><p>英文全拼：remove 删除文件：<code>rm 文件名</code> 删除空文件夹：<code>rm -r 文件夹名称/</code> 删除有内容的文件夹：<code>rm -rf 文件夹名称/</code></p><h2 id="mv-移动或重命名文件与文件夹" tabindex="-1">mv（移动或重命名文件与文件夹） <a class="header-anchor" href="#mv-移动或重命名文件与文件夹" aria-label="Permalink to &quot;mv（移动或重命名文件与文件夹）&quot;">​</a></h2><p>英文全拼：move file 重命名文件：<code>mv b.txt c.txt</code>，表示将 b.txt 重命名为 c.txt 重命名文件夹：<code>mv frontend/ new_frontend/</code>，表示将 frontend 目录重命名为 new_frontend 移动文件：<code>mv c.txt new_frontend/</code>，表示将 c.txt 文件移动到 new_frontend 文件夹</p><h2 id="mkdir-创建文件夹" tabindex="-1">mkdir（创建文件夹） <a class="header-anchor" href="#mkdir-创建文件夹" aria-label="Permalink to &quot;mkdir（创建文件夹）&quot;">​</a></h2><p>英文全拼：make director 创建单个文件夹：<code>mkdir test/</code>，创建 test 文件夹 一次性创建多级文件夹（）：<code>mkdir -p aaa/bbb/ccc</code>，表示创建 aaa/bbb/ccc 3 个文件夹</p><h2 id="touch-创建文件" tabindex="-1">touch（创建文件） <a class="header-anchor" href="#touch-创建文件" aria-label="Permalink to &quot;touch（创建文件）&quot;">​</a></h2><p>示例：<code>touch dd.txt</code>，将创建 dd.txt 文件</p><h2 id="chmod" tabindex="-1">chmod（） <a class="header-anchor" href="#chmod" aria-label="Permalink to &quot;chmod（）&quot;">​</a></h2><p>英文全拼：change mode</p><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html" target="_blank" rel="noreferrer">菜鸟教程</a></p><p>示例：<code>chmod 777 dd.txt</code>，777 表示读写可执行权限</p><h2 id="与-执行可执行文件" tabindex="-1">. 与 ./（执行可执行文件） <a class="header-anchor" href="#与-执行可执行文件" aria-label="Permalink to &quot;. 与 ./（执行可执行文件）&quot;">​</a></h2><p>假如我有一个 test.sh 文件需要执行，可以通过<code>. test.sh</code>或<code>./test.sh</code>来执行。他们之间有一点区别:</p><ul><li>.（点号）命令用于在当前 shell 环境中执行指定的脚本文件。这意味着脚本文件中的任何导出的变量或修改的环境变量都会影响当前 shell。</li></ul><ul><li>./（点斜杠）命令用于执行当前目录下的脚本文件。它指示系统在当前目录中查找并执行指定的脚本文件。</li></ul><h2 id="cat-查看文件内容" tabindex="-1">cat（查看文件内容） <a class="header-anchor" href="#cat-查看文件内容" aria-label="Permalink to &quot;cat（查看文件内容）&quot;">​</a></h2><p>英文全拼：concatenate</p><p>示例：<code>cat dd.txt</code></p><h2 id="ping-测试网络连接" tabindex="-1">ping（测试网络连接） <a class="header-anchor" href="#ping-测试网络连接" aria-label="Permalink to &quot;ping（测试网络连接）&quot;">​</a></h2><blockquote><p>ping 是用于测试网络连接的最流行的网络终端工具。ping 有很多选项，但在大多数情况下，您将使用它来请求域或 IP 地址</p></blockquote><h2 id="sudo-超级用户" tabindex="-1">sudo（超级用户） <a class="header-anchor" href="#sudo-超级用户" aria-label="Permalink to &quot;sudo（超级用户）&quot;">​</a></h2><p><code>sudo</code>通常用于安装软件或编辑用户主目录以外的文件，有些操作没有权限可以通过加上<code>sudo</code>来进行，需要输入密码</p>',41),r=[d];function l(i,n,h,s,u,p){return o(),a("div",null,r)}const q=e(c,[["render",l]]);export{b as __pageData,q as default};
